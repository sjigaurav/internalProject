/*
 *
 * ADOBE CONFIDENTIAL
 * __________________
 *
 *  Copyright 2012 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
/***
 * Workflow process to create an activity if a user posts an approved cq:Comment
 ***/

var PROPERTY_AUTHORIZABLE_ID = "authorizableId";
var PROPERTY_USER_IDENTIFIER = "userIdentifier";
var PROPERTY_ACTIVITY_CREATED = "activityCreated";
var PROPERTY_JCR_TITLE = "jcr:title";
var PROPERTY_JCR_DESCRIPTION = "jcr:description";
var PROPERTY_SLING_RESOURCE_TYPE = "sling:resourceType";
var TYPE_JCR_PATH = "JCR_PATH";
var SUFFIX_JCR_CONTENT = "/jcr:content";
//must be uppercase, will not save if lower case
var ACTIVITY_VERB = "POST";
var ACTIVITY_TITLE = "{0} {1} on {2}";
//this is the resource type of a question
var QNA_RESOURCE_TYPE = "social/qna/components/topic";
var UNREPLICATED_DATA = "unreplicateddata";


//function to convert a sling resource type to a activity stream object type, most will end up as comment
//a QnA will become a question others are comments
function convertResTypeToObjectType(resourceType) {
  if (resourceType == QNA_RESOURCE_TYPE){
      return "question";
  }
  return "comment";
}

var workflowData = workItem.getWorkflowData();
if(workflowData.getPayloadType() == TYPE_JCR_PATH){
    var path = workflowData.getPayload().toString();
    var session = workflowSession.getSession();
    var resolver = sling.getService(Packages.org.apache.sling.jcr.resource.JcrResourceResolverFactory).getResourceResolver(session);
    var activityService = sling.getService(Packages.com.adobe.granite.activitystreams.ActivityManager);
    var i18n = new Packages.com.day.cq.i18n.I18n(request);
    var localizedVerb = i18n.get(ACTIVITY_VERB);

    // get target node and content
    var node = null;
    try {
        node = session.getItem(path);
    }
    catch(e){
        // path not found -> comment has been deleted
    }
    try {
        if(node){
            var pagePath = Packages.com.adobe.cq.social.commons.CollabUtil.getPagePath(resolver.resolve(node.getPath()));
            var targetPath = Packages.com.adobe.cq.social.commons.CollabUtil.UGCToResourcePath(resolver.resolve(pagePath));
            var targetNode = session.getItem(targetPath+SUFFIX_JCR_CONTENT);

            //get internationalized strings for ACTIVITY_VERB AND ACTIVITY_TITLE

            var alreadyCreated = false;

            if (node.hasNode(UNREPLICATED_DATA)) {
                var node2 = node.getNode(UNREPLICATED_DATA);
                alreadyCreated = (node2.hasProperty(PROPERTY_ACTIVITY_CREATED) &&
                           "true".equals(node2.getProperty(PROPERTY_ACTIVITY_CREATED).getString()));
            } else {
                alreadyCreated = (node.hasProperty(PROPERTY_ACTIVITY_CREATED) &&
                           "true".equals(node.getProperty(PROPERTY_ACTIVITY_CREATED).getString()));
            }


            if(!alreadyCreated){
                // create activity object (comment)
                var object = activityService.newActivityObject();
                object.setId(node.getPath());
                if(node.hasProperty(PROPERTY_SLING_RESOURCE_TYPE)){
                    object.setObjectType(convertResTypeToObjectType(node.getProperty(PROPERTY_SLING_RESOURCE_TYPE).getString()));
                    object.setProperty("subType", node.getProperty(PROPERTY_SLING_RESOURCE_TYPE).getString());
                }

                // create activity target
                var target = activityService.newActivityObject();
                target.setId(targetPath);
                var targetTitle = targetNode.getProperty(PROPERTY_JCR_TITLE).getString();
                //construct string

                target.setDisplayName(targetTitle);
                if(targetNode.hasProperty(PROPERTY_SLING_RESOURCE_TYPE)){
                    target.setObjectType(targetNode.getProperty(PROPERTY_SLING_RESOURCE_TYPE).getString());
                }

                // create activity
                var activity = activityService.newActivity();
                //verb not set, default to post?
                activity.setVerb(ACTIVITY_VERB);
                // duplicate content of comment
                var content = "";
                if(node.hasProperty(PROPERTY_JCR_DESCRIPTION)){
                    content = node.getProperty(PROPERTY_JCR_DESCRIPTION).getString();
                }
                object.setContent(content);
                //set renderType

                if(node.hasProperty(PROPERTY_USER_IDENTIFIER)){
                    activity.setActorUserId(node.getProperty(PROPERTY_USER_IDENTIFIER).getString());

                    var localizedTitle = i18n.get(targetTitle);

                    //need to pass in localized replacement strings first
                    var replArgs = [node.getProperty(PROPERTY_AUTHORIZABLE_ID).getString(), localizedVerb, localizedTitle]
                    localizedTitle = i18n.get(ACTIVITY_TITLE, "", replArgs);
                    activity.setTitle(localizedTitle);
                    activity.setObject(object);
                    activity.setTarget(target);

                    // write activity
                    var stream = activityService.getUserStream(resolver, activity.getActorUserId(), null);
                    stream.append(activity);

                    var node2;
                    if (node.hasNode(UNREPLICATED_DATA)) {
                        node2 = node.getNode(UNREPLICATED_DATA);
                    } else {
                        node2 = node.addNode(UNREPLICATED_DATA, "sling:Folder");
                    }

                    node2.setProperty(PROPERTY_ACTIVITY_CREATED, "true");
                    node.save();
                }
                else{
                    log.error("Could not create comment activity. Missing author identifier.");
                }
            }
        }
    }
    catch(e){
        log.error("Could not create comment activity: "+e);
    }
}
