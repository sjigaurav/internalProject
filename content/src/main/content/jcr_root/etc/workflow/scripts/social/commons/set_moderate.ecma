/*
 *
 * ADOBE CONFIDENTIAL
 * __________________
 *
 *  Copyright 2013 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
/*
 * Helper method to evaluate script arguments.
 *
 */
function getArgs(metaData){

    log.debug("metaData used: " + metaData);

    var PROCESS_ARGS = "PROCESS_ARGS";
    var MODERATE = "MODERATE";

    // legacy, using 'PROCESS_ARGS' if set
    if(metaData.get(PROCESS_ARGS)){
        log.debug("using PROCESS_ARGS metaData = " + metaData.get(PROCESS_ARGS));
        return metaData.get(PROCESS_ARGS).split(",");
    }
    else if(metaData.get(MODERATE)){
        log.debug("using MODERATE metaData = " + metaData.get(MODERATE));
        if(metaData.get(MODERATE) == "true"){
            return new Array(metaData.get(MODERATE));
        }
        else{
            return new Array("false");
        }
    }
    else{
        log.debug("return false array.");
        return new Array("false");
    }

}

args = getArgs(metaData);
log.debug("using args: " + args);

var workflowData = workItem.getWorkflowData();
if (workflowData.getPayloadType() == "JCR_PATH") {
    var path = workflowData.getPayload().toString();
    if (workflowSession.getSession().itemExists(path)) {
        var node = workflowSession.getSession().getItem(path);
        if (args[0] == "true") {
            node.setProperty("moderate", true);
        } else if (node.hasProperty("moderate")) {
            node.getProperty("moderate").remove();
        }
        node.save();
    } else {
        log.error("Could not approve the payload. Missing Payload: " + path);
        if (workItem.getWorkflow().isActive()) {
            workflowSession.terminateWorkflow(workItem.getWorkflow());
            log.error("Terminated workflow since payload is missing");
        } else {
            throw new Packages.com.day.cq.workflow.WorkflowException("Cannot terminate workflow instance as it is not active");
        }
    }
}
