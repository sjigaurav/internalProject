/*
 *
 * ADOBE CONFIDENTIAL
 * __________________
 *
 *  Copyright 2012 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
/***
 * Workflow process to add a user to given user group create a user group if not 
 ***/
var TYPE_JCR_PATH = "JCR_PATH";
var PROPERTY_GROUP_NAME = Packages.com.adobe.cq.social.group.api.GroupConstants.PROPERTY_GROUP_NAME;
var USER_ID = Packages.com.adobe.cq.social.group.api.GroupConstants.PROPERTY_USER_ID;
var GROUP_ADMIN_SUFFIX = Packages.com.adobe.cq.social.group.api.GroupConstants.GROUP_ADMINGROUP_SUFFIX;
var GROUP_MODERATOR_SUFFIX = Packages.com.adobe.cq.social.group.api.GroupConstants.GROUP_MODERATORGROUP_SUFFIX;
var GROUP_MEMBER_SUFFIX = Packages.com.adobe.cq.social.group.api.GroupConstants.GROUP_MEMBERGROUP_SUFFIX;
var DEFAULT_ADMIN_USER = Packages.org.apache.sling.jcr.base.AbstractSlingRepository.DEFAULT_ADMIN_USER;
var PROPERTY_FORM_PAYLOAD = "formPayload";

var workflowData = workItem.getWorkflowData();
if(workflowData.getPayloadType() == TYPE_JCR_PATH){
    var path = workflowData.getPayload().toString();
    var session = workflowSession.getSession();
    var resolver = sling.getService(Packages.org.apache.sling.jcr.resource.JcrResourceResolverFactory).getResourceResolver(session);
    var repository = sling.getService(Packages.org.apache.sling.jcr.api.SlingRepository);
    var groupService = sling.getService(Packages.com.adobe.cq.social.group.api.GroupService);
    //log.debug("getInitiator: "+workItem.getWorkflow().getInitiator());

    try {
        path = path + "/" + Packages.org.apache.jackrabbit.JcrConstants.JCR_CONTENT;
        var resource = resolver.getResource(path);
        //log.error("path:"+path);
        var page_props = Packages.org.apache.sling.api.resource.ResourceUtil.getValueMap(resource);
        var originalPayload = page_props.get(PROPERTY_FORM_PAYLOAD, "");
        //log.error("originalPayload:"+originalPayload);
        
        var node = resolver.getResource(originalPayload);
        var props = Packages.org.apache.sling.api.resource.ResourceUtil.getValueMap(node);
        
        var groupName = props.get(PROPERTY_GROUP_NAME, "");
        groupName = Packages.com.day.cq.commons.jcr.JcrUtil.createValidName(groupName);
        var uid = props.get(USER_ID, ""); //workaround to get the user id.
        
        if(groupName.equals("")){
            log.error("group name cannot be empty");
        }
        if(groupService == null){
            log.error("cannot get com.adobe.cq.social.group.api.GroupService ");
        }
        if(groupService != null && !groupName.equals("")){
            //add user to admin group
            groupService.addGroupMember(resolver, groupName + GROUP_ADMIN_SUFFIX, uid);
            //add CQ super admin to admin group
            groupService.addGroupMember(resolver, groupName + GROUP_ADMIN_SUFFIX, DEFAULT_ADMIN_USER);
            //add admin group to moderator group, e.g. admins are also group moderators
            groupService.addGroupMember(resolver, groupName + GROUP_MODERATOR_SUFFIX, (groupName + GROUP_ADMIN_SUFFIX));
            //add moderator group to member group, e.g. moderators are also group members
            groupService.addGroupMember(resolver, groupName + GROUP_MEMBER_SUFFIX, (groupName + GROUP_MODERATOR_SUFFIX));
        }

    }
    catch(e){
        log.error("cannot add "+uid+" to group '"+groupName+"'. "+e);
    }
}
