/*
 *
 * ADOBE CONFIDENTIAL
 * __________________
 *
 *  Copyright 2012 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
var TYPE_JCR_PATH = "JCR_PATH";
var PROPERTY_FORM_PAYLOAD = "formPayload";
var ETC_PATH = "/etc/social/groups";

var workflowData = workItem.getWorkflowData();
if(workflowData.getPayloadType() == TYPE_JCR_PATH){
    var session = workflowSession.getSession();
    var path = workflowData.getPayload().toString();
    var resolver = sling.getService(Packages.org.apache.sling.jcr.resource.JcrResourceResolverFactory).getResourceResolver(session);
    var repository = sling.getService(Packages.org.apache.sling.jcr.api.SlingRepository);
    var groupService = sling.getService(Packages.com.adobe.cq.social.group.api.GroupService);

    try {
        //log.error("path:"+path);
        if(groupService == null){
            log.error("cannot get com.adobe.cq.social.group.api.GroupService ");
        }

        if(groupService != null && !path.equals("")){
            if(path.indexOf(ETC_PATH)>=0){
                //if the payload is under ETC folder 
                groupService.cleanup(repository, resolver, path);
            }else{
                //if the payload is the community page
                path = path + "/" + Packages.org.apache.jackrabbit.JcrConstants.JCR_CONTENT;
                var resource = resolver.getResource(path);
                var page_props = Packages.org.apache.sling.api.resource.ResourceUtil.getValueMap(resource);
                var originalPayload = page_props.get(PROPERTY_FORM_PAYLOAD, path);
                //log.error("originalPayload:"+originalPayload);
                groupService.cleanup(repository, resolver, originalPayload);            
            }
        }
    } catch(e) {
        log.warn("Cannot delete path " + path + " " + e);
    }
}